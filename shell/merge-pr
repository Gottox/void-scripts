#!/bin/bash
set -e

update_pr() {
	$GHI show "$i" > ".git/mass-merge-pr/$i"
}

fetch_pr() {
	printf "Fetching Pullrequests... " >&2
	for i; do
		{
			update_pr "$i"
			printf . >&2
		} &
	done
	wait
	printf " done!\n" >&2
}

fetch_git() {
	printf "Fetching Git..." >&2
	printf "+refs/pull/%i/head\n" "$@" | \
		xargs $GIT fetch origin master > /dev/null 2>&1
	tr "/" "\t" < .git/FETCH_HEAD | awk '{print $4 " " $1 }'
	printf " done!\n" >&2
}

handle_pr() {
	local issue="$1" hash="$2"
	local head=$($GIT rev-parse HEAD)
	local base=$($GIT merge-base $head $hash)

	{
		cat .git/mass-merge-pr/$issue
		$GIT show --oneline --no-patch "$head..$hash"
		$GIT diff --stat "$head...$hash"
	} | less -F
	printf "| %s " \
		"${RED}m${RESET}erge" \
		"${RED}r${RESET}ebase" \
		"${RED}l${RESET}og" \
		"${RED}p${RESET}atch" \
		"${RED}w${RESET}eb" \
		"${RED}s${RESET}kip"
	read -p "|>" -r -N 1 action
	clear
	case $action in
		m)
			# TODO: Proper commit message.
			$GIT merge "$hash"
			return ;;
		r)
			$GIT rev-list --no-merges --reverse "$head..$hash" | $GIT cherry-pick --stdin --allow-empty --keep-redundant-commits
			$GIT filter-branch -f --prune-empty --msg-filter \
				"cat; echo; echo 'Closes #$issue.'" \
				"$head..HEAD"
			return ;;
		p)
			$GIT diff "$base...$hash" | less;;
		l)
			$GIT show "$base...$hash" | less;;
		w)
			$GHI show "-w" "$issue" ;;
		s)
			skipped="$skipped $issue"
			return ;;
	esac
	return 1;
}


# check xtools
if ! type xdistdir > /dev/null; then
	echo "xdistdir is missing" >&2
	missing_tool+=" xtools"
fi
# check ghi
if ! type ghi > /dev/null; then
	echo "ghi is missing" >&2
	missing_tool+=" ghi"
fi

if [ "$missing_tool" ]; then
	echo "fix with: xbps-install -Sy$missing_tool" >&2
	exit 1
fi

cd "$(xdistdir)"

if [ "$(git rev-parse --abbrev-ref HEAD)" != "master" ]; then
	echo "== Not on master, abort ==" 2>&1
	exit 1;
fi

mkdir -p .git/mass-merge-pr

readonly GIT="git --no-pager -c color.ui=always"
readonly GHI="ghi --color"
readonly RED=$(printf "\e[31m")
readonly RESET=$(printf "\e[0m")
skipped=

readonly PR_TABLE="$(fetch_git "$@")"
fetch_pr "$@"

$GIT rebase --autostash origin/master
for i; do
	clear
	until handle_pr $(echo "$PR_TABLE" | grep "^$i "); do : ; done
done

if [ "$skipped" ]; then
	echo "Skipped Issues:" $skipped
	read -rp "Open in browser? " -n 1 action
	echo
	case $action in
		""|y|Y)
			for i in $skipped; do
				$GHI show -w "$i"
			done
			;;
	esac
fi
